{"version":3,"sources":["logo.svg","components/icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","classsName","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59ff69aa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport {FaTimes, FaPen,FaRegCircle} from \"react-icons/fa\";\n\n\n\nconst Icon = ({name}) => {\n    switch (name) {\n         case \"circle\":\n             return <FaRegCircle className=\"icons\" />;\n         case \"cross\":\n             return <FaTimes  className=\"icons\" />;           \n        default:\n             return <FaPen classsName=\"icons\" />;\n      \n    }\n};\n\n\nexport default Icon;","import React, { useState } from \"react\";\nimport logo from './logo.svg';\nimport Icon from \"./components/icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Card, CardBody ,Container, Button ,Col ,Row } from \"reactstrap\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n  \nconst itemArray = new Array(9).fill(\"empty\")\n\n\nconst  App = () => {\nconst [isCross ,setIsCross] = useState(false)\nconst [winMessage,setWinMessage] = useState(\"\");\n\nconst reloadGame = () => {\n  setIsCross(false);\n  setWinMessage(\"\");\n  itemArray.fill(\"empty\" , 0, 9);\n}\n\nconst checkIsWinner = () =>{\n if (itemArray[0] === itemArray[1] &&\n  itemArray[0] === itemArray[2] &&\n  itemArray[0] !== \"empty\"\n  ) {\n    setWinMessage(`${itemArray[0]} won`);\n  }else if (\n    itemArray[3] !== \"empty\" &&\n    itemArray[3] === itemArray[4] &&\n    itemArray[4] === itemArray[5]\n  ) {\n    setWinMessage(`${itemArray[3]} won`);\n  } else if (\n    itemArray[6] !== \"empty\" &&\n    itemArray[6] === itemArray[7] &&\n    itemArray[7] === itemArray[8]\n  ) {\n    setWinMessage(`${itemArray[6]} won`);\n  } else if (\n    itemArray[0] !== \"empty\" &&\n    itemArray[0] === itemArray[3] &&\n    itemArray[3] === itemArray[6]\n  ) {\n    setWinMessage(`${itemArray[0]} won`);\n  } else if (\n    itemArray[1] !== \"empty\" &&\n    itemArray[1] === itemArray[4] &&\n    itemArray[4] === itemArray[7]\n  ) {\n    setWinMessage(`${itemArray[1]} won`);\n  } else if (\n    itemArray[2] !== \"empty\" &&\n    itemArray[2] === itemArray[5] &&\n    itemArray[5] === itemArray[8]\n  ) {\n    setWinMessage(`${itemArray[2]} won`);\n  } else if (\n    itemArray[0] !== \"empty\" &&\n    itemArray[0] === itemArray[4] &&\n    itemArray[4] === itemArray[8]\n  ) {\n    setWinMessage(`${itemArray[0]} won`);\n  } else if (\n    itemArray[2] !== \"empty\" &&\n    itemArray[2] === itemArray[4] &&\n    itemArray[4] === itemArray[6]\n  ) {\n    setWinMessage(`${itemArray[2]} won`);\n  }\n};\n\n\nconst changeItem = itemNumber => {\n  if (winMessage) {\n    return toast(winMessage, { type: \"success\" });\n  }\n  if (itemArray[itemNumber] === \"empty\"){\n    itemArray[itemNumber] = isCross ? \"cross\" : \"circle\" ;\n    setIsCross(!isCross);\n  }else {\n    return toast(\"Already filled\", {type: \"error\"})\n  }\n  checkIsWinner();\n\n};\nreturn (\n    <container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\"/>\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n             <h1 className=\"text-success text-uppercase text-center\">\n               {winMessage}\n             </h1>\n             <Button color=\"success\" block \n             onClick={reloadGame}>\n             Reload the Game\n            </Button>\n            </div>\n          ):(\n            <h1 className=\"text-center text-warning\">\n              {isCross ? \"Cross\" : \"Circle\"} turns\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card color=\"warning\" onClick={() => changeItem(index)} >\n                <CardBody className=\"box\">\n                  <Icon name={item}/>\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </container>\n    \n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}